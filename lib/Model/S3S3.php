<?php
/**
 * S3S3
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Управляемых сервисов
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.4.1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * S3S3 Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class S3S3 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'S3_S3';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'public' => 'bool',
        'access_key' => 'string',
        'secret_key' => 'string',
        'fqdn' => 'string',
        'cors' => '\OpenAPI\Client\Model\S3Cors[]',
        'quota_used_size' => 'int',
        'ftp' => '\OpenAPI\Client\Model\S3Ftp',
        'sftp' => '\OpenAPI\Client\Model\S3Sftp'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'public' => null,
        'access_key' => null,
        'secret_key' => null,
        'fqdn' => null,
        'cors' => null,
        'quota_used_size' => 'uint32',
        'ftp' => null,
        'sftp' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'public' => false,
		'access_key' => false,
		'secret_key' => false,
		'fqdn' => false,
		'cors' => false,
		'quota_used_size' => false,
		'ftp' => false,
		'sftp' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'public' => 'public',
        'access_key' => 'access_key',
        'secret_key' => 'secret_key',
        'fqdn' => 'fqdn',
        'cors' => 'cors',
        'quota_used_size' => 'quota_used_size',
        'ftp' => 'ftp',
        'sftp' => 'sftp'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'public' => 'setPublic',
        'access_key' => 'setAccessKey',
        'secret_key' => 'setSecretKey',
        'fqdn' => 'setFqdn',
        'cors' => 'setCors',
        'quota_used_size' => 'setQuotaUsedSize',
        'ftp' => 'setFtp',
        'sftp' => 'setSftp'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'public' => 'getPublic',
        'access_key' => 'getAccessKey',
        'secret_key' => 'getSecretKey',
        'fqdn' => 'getFqdn',
        'cors' => 'getCors',
        'quota_used_size' => 'getQuotaUsedSize',
        'ftp' => 'getFtp',
        'sftp' => 'getSftp'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('public', $data ?? [], null);
        $this->setIfExists('access_key', $data ?? [], null);
        $this->setIfExists('secret_key', $data ?? [], null);
        $this->setIfExists('fqdn', $data ?? [], null);
        $this->setIfExists('cors', $data ?? [], null);
        $this->setIfExists('quota_used_size', $data ?? [], null);
        $this->setIfExists('ftp', $data ?? [], null);
        $this->setIfExists('sftp', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets public
     *
     * @return bool|null
     */
    public function getPublic()
    {
        return $this->container['public'];
    }

    /**
     * Sets public
     *
     * @param bool|null $public public
     *
     * @return self
     */
    public function setPublic($public)
    {

        if (is_null($public)) {
            throw new \InvalidArgumentException('non-nullable public cannot be null');
        }

        $this->container['public'] = $public;

        return $this;
    }

    /**
     * Gets access_key
     *
     * @return string|null
     */
    public function getAccessKey()
    {
        return $this->container['access_key'];
    }

    /**
     * Sets access_key
     *
     * @param string|null $access_key access_key
     *
     * @return self
     */
    public function setAccessKey($access_key)
    {

        if (is_null($access_key)) {
            throw new \InvalidArgumentException('non-nullable access_key cannot be null');
        }

        $this->container['access_key'] = $access_key;

        return $this;
    }

    /**
     * Gets secret_key
     *
     * @return string|null
     */
    public function getSecretKey()
    {
        return $this->container['secret_key'];
    }

    /**
     * Sets secret_key
     *
     * @param string|null $secret_key secret_key
     *
     * @return self
     */
    public function setSecretKey($secret_key)
    {

        if (is_null($secret_key)) {
            throw new \InvalidArgumentException('non-nullable secret_key cannot be null');
        }

        $this->container['secret_key'] = $secret_key;

        return $this;
    }

    /**
     * Gets fqdn
     *
     * @return string|null
     */
    public function getFqdn()
    {
        return $this->container['fqdn'];
    }

    /**
     * Sets fqdn
     *
     * @param string|null $fqdn fqdn
     *
     * @return self
     */
    public function setFqdn($fqdn)
    {

        if (is_null($fqdn)) {
            throw new \InvalidArgumentException('non-nullable fqdn cannot be null');
        }

        $this->container['fqdn'] = $fqdn;

        return $this;
    }

    /**
     * Gets cors
     *
     * @return \OpenAPI\Client\Model\S3Cors[]|null
     */
    public function getCors()
    {
        return $this->container['cors'];
    }

    /**
     * Sets cors
     *
     * @param \OpenAPI\Client\Model\S3Cors[]|null $cors cors
     *
     * @return self
     */
    public function setCors($cors)
    {

        if (is_null($cors)) {
            throw new \InvalidArgumentException('non-nullable cors cannot be null');
        }

        $this->container['cors'] = $cors;

        return $this;
    }

    /**
     * Gets quota_used_size
     *
     * @return int|null
     */
    public function getQuotaUsedSize()
    {
        return $this->container['quota_used_size'];
    }

    /**
     * Sets quota_used_size
     *
     * @param int|null $quota_used_size quota_used_size
     *
     * @return self
     */
    public function setQuotaUsedSize($quota_used_size)
    {

        if (is_null($quota_used_size)) {
            throw new \InvalidArgumentException('non-nullable quota_used_size cannot be null');
        }

        $this->container['quota_used_size'] = $quota_used_size;

        return $this;
    }

    /**
     * Gets ftp
     *
     * @return \OpenAPI\Client\Model\S3Ftp|null
     */
    public function getFtp()
    {
        return $this->container['ftp'];
    }

    /**
     * Sets ftp
     *
     * @param \OpenAPI\Client\Model\S3Ftp|null $ftp ftp
     *
     * @return self
     */
    public function setFtp($ftp)
    {

        if (is_null($ftp)) {
            throw new \InvalidArgumentException('non-nullable ftp cannot be null');
        }

        $this->container['ftp'] = $ftp;

        return $this;
    }

    /**
     * Gets sftp
     *
     * @return \OpenAPI\Client\Model\S3Sftp|null
     */
    public function getSftp()
    {
        return $this->container['sftp'];
    }

    /**
     * Sets sftp
     *
     * @param \OpenAPI\Client\Model\S3Sftp|null $sftp sftp
     *
     * @return self
     */
    public function setSftp($sftp)
    {

        if (is_null($sftp)) {
            throw new \InvalidArgumentException('non-nullable sftp cannot be null');
        }

        $this->container['sftp'] = $sftp;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


