<?php
/**
 * CloudCreateRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Управляемых сервисов
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.4.1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CloudCreateRequest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CloudCreateRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Cloud_CreateRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'configuration_id' => 'string',
        'display_name' => 'string',
        'description' => 'string',
        'mysql_params' => '\OpenAPI\Client\Model\MysqlCreateParams',
        'postgresql_params' => '\OpenAPI\Client\Model\PostgresqlPgCreateParams',
        's3_params' => '\OpenAPI\Client\Model\S3S3CreateParams',
        'extra' => 'string',
        'region' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'configuration_id' => null,
        'display_name' => null,
        'description' => null,
        'mysql_params' => null,
        'postgresql_params' => null,
        's3_params' => null,
        'extra' => null,
        'region' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'configuration_id' => false,
		'display_name' => false,
		'description' => false,
		'mysql_params' => false,
		'postgresql_params' => false,
		's3_params' => false,
		'extra' => false,
		'region' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'configuration_id' => 'configuration_id',
        'display_name' => 'display_name',
        'description' => 'description',
        'mysql_params' => 'mysql_params',
        'postgresql_params' => 'postgresql_params',
        's3_params' => 's3_params',
        'extra' => 'extra',
        'region' => 'region'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'configuration_id' => 'setConfigurationId',
        'display_name' => 'setDisplayName',
        'description' => 'setDescription',
        'mysql_params' => 'setMysqlParams',
        'postgresql_params' => 'setPostgresqlParams',
        's3_params' => 'setS3Params',
        'extra' => 'setExtra',
        'region' => 'setRegion'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'configuration_id' => 'getConfigurationId',
        'display_name' => 'getDisplayName',
        'description' => 'getDescription',
        'mysql_params' => 'getMysqlParams',
        'postgresql_params' => 'getPostgresqlParams',
        's3_params' => 'getS3Params',
        'extra' => 'getExtra',
        'region' => 'getRegion'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('configuration_id', $data ?? [], null);
        $this->setIfExists('display_name', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('mysql_params', $data ?? [], null);
        $this->setIfExists('postgresql_params', $data ?? [], null);
        $this->setIfExists('s3_params', $data ?? [], null);
        $this->setIfExists('extra', $data ?? [], null);
        $this->setIfExists('region', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets configuration_id
     *
     * @return string|null
     */
    public function getConfigurationId()
    {
        return $this->container['configuration_id'];
    }

    /**
     * Sets configuration_id
     *
     * @param string|null $configuration_id configuration_id
     *
     * @return self
     */
    public function setConfigurationId($configuration_id)
    {

        if (is_null($configuration_id)) {
            throw new \InvalidArgumentException('non-nullable configuration_id cannot be null');
        }

        $this->container['configuration_id'] = $configuration_id;

        return $this;
    }

    /**
     * Gets display_name
     *
     * @return string|null
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string|null $display_name display_name
     *
     * @return self
     */
    public function setDisplayName($display_name)
    {

        if (is_null($display_name)) {
            throw new \InvalidArgumentException('non-nullable display_name cannot be null');
        }

        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {

        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets mysql_params
     *
     * @return \OpenAPI\Client\Model\MysqlCreateParams|null
     */
    public function getMysqlParams()
    {
        return $this->container['mysql_params'];
    }

    /**
     * Sets mysql_params
     *
     * @param \OpenAPI\Client\Model\MysqlCreateParams|null $mysql_params mysql_params
     *
     * @return self
     */
    public function setMysqlParams($mysql_params)
    {

        if (is_null($mysql_params)) {
            throw new \InvalidArgumentException('non-nullable mysql_params cannot be null');
        }

        $this->container['mysql_params'] = $mysql_params;

        return $this;
    }

    /**
     * Gets postgresql_params
     *
     * @return \OpenAPI\Client\Model\PostgresqlPgCreateParams|null
     */
    public function getPostgresqlParams()
    {
        return $this->container['postgresql_params'];
    }

    /**
     * Sets postgresql_params
     *
     * @param \OpenAPI\Client\Model\PostgresqlPgCreateParams|null $postgresql_params postgresql_params
     *
     * @return self
     */
    public function setPostgresqlParams($postgresql_params)
    {

        if (is_null($postgresql_params)) {
            throw new \InvalidArgumentException('non-nullable postgresql_params cannot be null');
        }

        $this->container['postgresql_params'] = $postgresql_params;

        return $this;
    }

    /**
     * Gets s3_params
     *
     * @return \OpenAPI\Client\Model\S3S3CreateParams|null
     */
    public function getS3Params()
    {
        return $this->container['s3_params'];
    }

    /**
     * Sets s3_params
     *
     * @param \OpenAPI\Client\Model\S3S3CreateParams|null $s3_params s3_params
     *
     * @return self
     */
    public function setS3Params($s3_params)
    {

        if (is_null($s3_params)) {
            throw new \InvalidArgumentException('non-nullable s3_params cannot be null');
        }

        $this->container['s3_params'] = $s3_params;

        return $this;
    }

    /**
     * Gets extra
     *
     * @return string|null
     */
    public function getExtra()
    {
        return $this->container['extra'];
    }

    /**
     * Sets extra
     *
     * @param string|null $extra extra
     *
     * @return self
     */
    public function setExtra($extra)
    {

        if (is_null($extra)) {
            throw new \InvalidArgumentException('non-nullable extra cannot be null');
        }

        $this->container['extra'] = $extra;

        return $this;
    }

    /**
     * Gets region
     *
     * @return string|null
     */
    public function getRegion()
    {
        return $this->container['region'];
    }

    /**
     * Sets region
     *
     * @param string|null $region region
     *
     * @return self
     */
    public function setRegion($region)
    {

        if (is_null($region)) {
            throw new \InvalidArgumentException('non-nullable region cannot be null');
        }

        $this->container['region'] = $region;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


