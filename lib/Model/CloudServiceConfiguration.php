<?php
/**
 * CloudServiceConfiguration
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Управляемых сервисов
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.4.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CloudServiceConfiguration Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CloudServiceConfiguration implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Cloud_ServiceConfiguration';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'price_day' => 'float',
        'price_month' => 'float',
        'region' => 'string',
        'type' => 'string',
        'mysql5' => '\OpenAPI\Client\Model\MysqlMysql5Configuration',
        'mysql8' => '\OpenAPI\Client\Model\MysqlMysql8Configuration',
        'mysql84' => '\OpenAPI\Client\Model\MysqlMysql84Configuration',
        'postgresql15' => '\OpenAPI\Client\Model\PostgresqlPostgresql15Configuration',
        'postgresql14' => '\OpenAPI\Client\Model\PostgresqlPostgresql14Configuration',
        'postgresql164' => '\OpenAPI\Client\Model\PostgresqlPostgresql164Configuration',
        's3' => '\OpenAPI\Client\Model\S3S3Configuration'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'price_day' => 'double',
        'price_month' => 'double',
        'region' => null,
        'type' => 'enum',
        'mysql5' => null,
        'mysql8' => null,
        'mysql84' => null,
        'postgresql15' => null,
        'postgresql14' => null,
        'postgresql164' => null,
        's3' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'price_day' => false,
		'price_month' => false,
		'region' => false,
		'type' => false,
		'mysql5' => false,
		'mysql8' => false,
		'mysql84' => false,
		'postgresql15' => false,
		'postgresql14' => false,
		'postgresql164' => false,
		's3' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'price_day' => 'price_day',
        'price_month' => 'price_month',
        'region' => 'region',
        'type' => 'type',
        'mysql5' => 'mysql5',
        'mysql8' => 'mysql8',
        'mysql84' => 'mysql84',
        'postgresql15' => 'postgresql15',
        'postgresql14' => 'postgresql14',
        'postgresql164' => 'postgresql164',
        's3' => 's3'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'price_day' => 'setPriceDay',
        'price_month' => 'setPriceMonth',
        'region' => 'setRegion',
        'type' => 'setType',
        'mysql5' => 'setMysql5',
        'mysql8' => 'setMysql8',
        'mysql84' => 'setMysql84',
        'postgresql15' => 'setPostgresql15',
        'postgresql14' => 'setPostgresql14',
        'postgresql164' => 'setPostgresql164',
        's3' => 'setS3'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'price_day' => 'getPriceDay',
        'price_month' => 'getPriceMonth',
        'region' => 'getRegion',
        'type' => 'getType',
        'mysql5' => 'getMysql5',
        'mysql8' => 'getMysql8',
        'mysql84' => 'getMysql84',
        'postgresql15' => 'getPostgresql15',
        'postgresql14' => 'getPostgresql14',
        'postgresql164' => 'getPostgresql164',
        's3' => 'getS3'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_MYSQL5 = 'MYSQL5';
    public const TYPE_MYSQL8 = 'MYSQL8';
    public const TYPE_MYSQL84 = 'MYSQL84';
    public const TYPE_POSTGRESQL14 = 'POSTGRESQL14';
    public const TYPE_POSTGRESQL15 = 'POSTGRESQL15';
    public const TYPE_S_3 = 'S_3';
    public const TYPE_POSTGRESQL164 = 'POSTGRESQL164';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_MYSQL5,
            self::TYPE_MYSQL8,
            self::TYPE_MYSQL84,
            self::TYPE_POSTGRESQL14,
            self::TYPE_POSTGRESQL15,
            self::TYPE_S_3,
            self::TYPE_POSTGRESQL164,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('price_day', $data ?? [], null);
        $this->setIfExists('price_month', $data ?? [], null);
        $this->setIfExists('region', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('mysql5', $data ?? [], null);
        $this->setIfExists('mysql8', $data ?? [], null);
        $this->setIfExists('mysql84', $data ?? [], null);
        $this->setIfExists('postgresql15', $data ?? [], null);
        $this->setIfExists('postgresql14', $data ?? [], null);
        $this->setIfExists('postgresql164', $data ?? [], null);
        $this->setIfExists('s3', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {

        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets price_day
     *
     * @return float|null
     */
    public function getPriceDay()
    {
        return $this->container['price_day'];
    }

    /**
     * Sets price_day
     *
     * @param float|null $price_day price_day
     *
     * @return self
     */
    public function setPriceDay($price_day)
    {

        if (is_null($price_day)) {
            throw new \InvalidArgumentException('non-nullable price_day cannot be null');
        }

        $this->container['price_day'] = $price_day;

        return $this;
    }

    /**
     * Gets price_month
     *
     * @return float|null
     */
    public function getPriceMonth()
    {
        return $this->container['price_month'];
    }

    /**
     * Sets price_month
     *
     * @param float|null $price_month price_month
     *
     * @return self
     */
    public function setPriceMonth($price_month)
    {

        if (is_null($price_month)) {
            throw new \InvalidArgumentException('non-nullable price_month cannot be null');
        }

        $this->container['price_month'] = $price_month;

        return $this;
    }

    /**
     * Gets region
     *
     * @return string|null
     */
    public function getRegion()
    {
        return $this->container['region'];
    }

    /**
     * Sets region
     *
     * @param string|null $region region
     *
     * @return self
     */
    public function setRegion($region)
    {

        if (is_null($region)) {
            throw new \InvalidArgumentException('non-nullable region cannot be null');
        }

        $this->container['region'] = $region;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }

        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets mysql5
     *
     * @return \OpenAPI\Client\Model\MysqlMysql5Configuration|null
     */
    public function getMysql5()
    {
        return $this->container['mysql5'];
    }

    /**
     * Sets mysql5
     *
     * @param \OpenAPI\Client\Model\MysqlMysql5Configuration|null $mysql5 mysql5
     *
     * @return self
     */
    public function setMysql5($mysql5)
    {

        if (is_null($mysql5)) {
            throw new \InvalidArgumentException('non-nullable mysql5 cannot be null');
        }

        $this->container['mysql5'] = $mysql5;

        return $this;
    }

    /**
     * Gets mysql8
     *
     * @return \OpenAPI\Client\Model\MysqlMysql8Configuration|null
     */
    public function getMysql8()
    {
        return $this->container['mysql8'];
    }

    /**
     * Sets mysql8
     *
     * @param \OpenAPI\Client\Model\MysqlMysql8Configuration|null $mysql8 mysql8
     *
     * @return self
     */
    public function setMysql8($mysql8)
    {

        if (is_null($mysql8)) {
            throw new \InvalidArgumentException('non-nullable mysql8 cannot be null');
        }

        $this->container['mysql8'] = $mysql8;

        return $this;
    }

    /**
     * Gets mysql84
     *
     * @return \OpenAPI\Client\Model\MysqlMysql84Configuration|null
     */
    public function getMysql84()
    {
        return $this->container['mysql84'];
    }

    /**
     * Sets mysql84
     *
     * @param \OpenAPI\Client\Model\MysqlMysql84Configuration|null $mysql84 mysql84
     *
     * @return self
     */
    public function setMysql84($mysql84)
    {

        if (is_null($mysql84)) {
            throw new \InvalidArgumentException('non-nullable mysql84 cannot be null');
        }

        $this->container['mysql84'] = $mysql84;

        return $this;
    }

    /**
     * Gets postgresql15
     *
     * @return \OpenAPI\Client\Model\PostgresqlPostgresql15Configuration|null
     */
    public function getPostgresql15()
    {
        return $this->container['postgresql15'];
    }

    /**
     * Sets postgresql15
     *
     * @param \OpenAPI\Client\Model\PostgresqlPostgresql15Configuration|null $postgresql15 postgresql15
     *
     * @return self
     */
    public function setPostgresql15($postgresql15)
    {

        if (is_null($postgresql15)) {
            throw new \InvalidArgumentException('non-nullable postgresql15 cannot be null');
        }

        $this->container['postgresql15'] = $postgresql15;

        return $this;
    }

    /**
     * Gets postgresql14
     *
     * @return \OpenAPI\Client\Model\PostgresqlPostgresql14Configuration|null
     */
    public function getPostgresql14()
    {
        return $this->container['postgresql14'];
    }

    /**
     * Sets postgresql14
     *
     * @param \OpenAPI\Client\Model\PostgresqlPostgresql14Configuration|null $postgresql14 postgresql14
     *
     * @return self
     */
    public function setPostgresql14($postgresql14)
    {

        if (is_null($postgresql14)) {
            throw new \InvalidArgumentException('non-nullable postgresql14 cannot be null');
        }

        $this->container['postgresql14'] = $postgresql14;

        return $this;
    }

    /**
     * Gets postgresql164
     *
     * @return \OpenAPI\Client\Model\PostgresqlPostgresql164Configuration|null
     */
    public function getPostgresql164()
    {
        return $this->container['postgresql164'];
    }

    /**
     * Sets postgresql164
     *
     * @param \OpenAPI\Client\Model\PostgresqlPostgresql164Configuration|null $postgresql164 postgresql164
     *
     * @return self
     */
    public function setPostgresql164($postgresql164)
    {

        if (is_null($postgresql164)) {
            throw new \InvalidArgumentException('non-nullable postgresql164 cannot be null');
        }

        $this->container['postgresql164'] = $postgresql164;

        return $this;
    }

    /**
     * Gets s3
     *
     * @return \OpenAPI\Client\Model\S3S3Configuration|null
     */
    public function getS3()
    {
        return $this->container['s3'];
    }

    /**
     * Sets s3
     *
     * @param \OpenAPI\Client\Model\S3S3Configuration|null $s3 s3
     *
     * @return self
     */
    public function setS3($s3)
    {

        if (is_null($s3)) {
            throw new \InvalidArgumentException('non-nullable s3 cannot be null');
        }

        $this->container['s3'] = $s3;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


