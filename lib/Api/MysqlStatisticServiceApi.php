<?php
/**
 * MysqlStatisticServiceApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Управляемых сервисов
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.4.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * MysqlStatisticServiceApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class MysqlStatisticServiceApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'mysqlStatisticServiceGetCpu' => [
            'application/json',
        ],
        'mysqlStatisticServiceGetCpuDetails' => [
            'application/json',
        ],
        'mysqlStatisticServiceGetDisk' => [
            'application/json',
        ],
        'mysqlStatisticServiceGetDiskUsage' => [
            'application/json',
        ],
        'mysqlStatisticServiceGetLoadAverage' => [
            'application/json',
        ],
        'mysqlStatisticServiceGetMemory' => [
            'application/json',
        ],
        'mysqlStatisticServiceGetNetwork' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation mysqlStatisticServiceGetCpu
     *
     * @param  string $service_id service_id (required)
     * @param  string $period period (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mysqlStatisticServiceGetCpu'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\MysqlStatisticGetCpuResponse
     */
    public function mysqlStatisticServiceGetCpu($service_id, $period = null, string $contentType = self::contentTypes['mysqlStatisticServiceGetCpu'][0])
    {
        list($response) = $this->mysqlStatisticServiceGetCpuWithHttpInfo($service_id, $period, $contentType);
        return $response;
    }

    /**
     * Operation mysqlStatisticServiceGetCpuWithHttpInfo
     *
     * @param  string $service_id (required)
     * @param  string $period (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mysqlStatisticServiceGetCpu'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\MysqlStatisticGetCpuResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function mysqlStatisticServiceGetCpuWithHttpInfo($service_id, $period = null, string $contentType = self::contentTypes['mysqlStatisticServiceGetCpu'][0])
    {
        $request = $this->mysqlStatisticServiceGetCpuRequest($service_id, $period, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\MysqlStatisticGetCpuResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\MysqlStatisticGetCpuResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\MysqlStatisticGetCpuResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\MysqlStatisticGetCpuResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\MysqlStatisticGetCpuResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation mysqlStatisticServiceGetCpuAsync
     *
     * @param  string $service_id (required)
     * @param  string $period (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mysqlStatisticServiceGetCpu'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mysqlStatisticServiceGetCpuAsync($service_id, $period = null, string $contentType = self::contentTypes['mysqlStatisticServiceGetCpu'][0])
    {
        return $this->mysqlStatisticServiceGetCpuAsyncWithHttpInfo($service_id, $period, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation mysqlStatisticServiceGetCpuAsyncWithHttpInfo
     *
     * @param  string $service_id (required)
     * @param  string $period (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mysqlStatisticServiceGetCpu'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mysqlStatisticServiceGetCpuAsyncWithHttpInfo($service_id, $period = null, string $contentType = self::contentTypes['mysqlStatisticServiceGetCpu'][0])
    {
        $returnType = '\OpenAPI\Client\Model\MysqlStatisticGetCpuResponse';
        $request = $this->mysqlStatisticServiceGetCpuRequest($service_id, $period, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'mysqlStatisticServiceGetCpu'
     *
     * @param  string $service_id (required)
     * @param  string $period (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mysqlStatisticServiceGetCpu'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function mysqlStatisticServiceGetCpuRequest($service_id, $period = null, string $contentType = self::contentTypes['mysqlStatisticServiceGetCpu'][0])
    {

        // verify the required parameter 'service_id' is set
        if ($service_id === null || (is_array($service_id) && count($service_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $service_id when calling mysqlStatisticServiceGetCpu'
            );
        }



        $resourcePath = '/v1/cloud/mysql/{service_id}/statistic/cpu';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $period,
            'period', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($service_id !== null) {
            $resourcePath = str_replace(
                '{' . 'service_id' . '}',
                ObjectSerializer::toPathValue($service_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation mysqlStatisticServiceGetCpuDetails
     *
     * @param  string $service_id service_id (required)
     * @param  string $period period (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mysqlStatisticServiceGetCpuDetails'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\MysqlStatisticGetCpuDetailsResponse
     */
    public function mysqlStatisticServiceGetCpuDetails($service_id, $period = null, string $contentType = self::contentTypes['mysqlStatisticServiceGetCpuDetails'][0])
    {
        list($response) = $this->mysqlStatisticServiceGetCpuDetailsWithHttpInfo($service_id, $period, $contentType);
        return $response;
    }

    /**
     * Operation mysqlStatisticServiceGetCpuDetailsWithHttpInfo
     *
     * @param  string $service_id (required)
     * @param  string $period (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mysqlStatisticServiceGetCpuDetails'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\MysqlStatisticGetCpuDetailsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function mysqlStatisticServiceGetCpuDetailsWithHttpInfo($service_id, $period = null, string $contentType = self::contentTypes['mysqlStatisticServiceGetCpuDetails'][0])
    {
        $request = $this->mysqlStatisticServiceGetCpuDetailsRequest($service_id, $period, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\MysqlStatisticGetCpuDetailsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\MysqlStatisticGetCpuDetailsResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\MysqlStatisticGetCpuDetailsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\MysqlStatisticGetCpuDetailsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\MysqlStatisticGetCpuDetailsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation mysqlStatisticServiceGetCpuDetailsAsync
     *
     * @param  string $service_id (required)
     * @param  string $period (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mysqlStatisticServiceGetCpuDetails'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mysqlStatisticServiceGetCpuDetailsAsync($service_id, $period = null, string $contentType = self::contentTypes['mysqlStatisticServiceGetCpuDetails'][0])
    {
        return $this->mysqlStatisticServiceGetCpuDetailsAsyncWithHttpInfo($service_id, $period, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation mysqlStatisticServiceGetCpuDetailsAsyncWithHttpInfo
     *
     * @param  string $service_id (required)
     * @param  string $period (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mysqlStatisticServiceGetCpuDetails'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mysqlStatisticServiceGetCpuDetailsAsyncWithHttpInfo($service_id, $period = null, string $contentType = self::contentTypes['mysqlStatisticServiceGetCpuDetails'][0])
    {
        $returnType = '\OpenAPI\Client\Model\MysqlStatisticGetCpuDetailsResponse';
        $request = $this->mysqlStatisticServiceGetCpuDetailsRequest($service_id, $period, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'mysqlStatisticServiceGetCpuDetails'
     *
     * @param  string $service_id (required)
     * @param  string $period (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mysqlStatisticServiceGetCpuDetails'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function mysqlStatisticServiceGetCpuDetailsRequest($service_id, $period = null, string $contentType = self::contentTypes['mysqlStatisticServiceGetCpuDetails'][0])
    {

        // verify the required parameter 'service_id' is set
        if ($service_id === null || (is_array($service_id) && count($service_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $service_id when calling mysqlStatisticServiceGetCpuDetails'
            );
        }



        $resourcePath = '/v1/cloud/mysql/{service_id}/statistic/cpu-details';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $period,
            'period', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($service_id !== null) {
            $resourcePath = str_replace(
                '{' . 'service_id' . '}',
                ObjectSerializer::toPathValue($service_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation mysqlStatisticServiceGetDisk
     *
     * @param  string $service_id service_id (required)
     * @param  string $period period (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mysqlStatisticServiceGetDisk'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\MysqlStatisticGetDiskResponse
     */
    public function mysqlStatisticServiceGetDisk($service_id, $period = null, string $contentType = self::contentTypes['mysqlStatisticServiceGetDisk'][0])
    {
        list($response) = $this->mysqlStatisticServiceGetDiskWithHttpInfo($service_id, $period, $contentType);
        return $response;
    }

    /**
     * Operation mysqlStatisticServiceGetDiskWithHttpInfo
     *
     * @param  string $service_id (required)
     * @param  string $period (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mysqlStatisticServiceGetDisk'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\MysqlStatisticGetDiskResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function mysqlStatisticServiceGetDiskWithHttpInfo($service_id, $period = null, string $contentType = self::contentTypes['mysqlStatisticServiceGetDisk'][0])
    {
        $request = $this->mysqlStatisticServiceGetDiskRequest($service_id, $period, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\MysqlStatisticGetDiskResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\MysqlStatisticGetDiskResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\MysqlStatisticGetDiskResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\MysqlStatisticGetDiskResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\MysqlStatisticGetDiskResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation mysqlStatisticServiceGetDiskAsync
     *
     * @param  string $service_id (required)
     * @param  string $period (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mysqlStatisticServiceGetDisk'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mysqlStatisticServiceGetDiskAsync($service_id, $period = null, string $contentType = self::contentTypes['mysqlStatisticServiceGetDisk'][0])
    {
        return $this->mysqlStatisticServiceGetDiskAsyncWithHttpInfo($service_id, $period, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation mysqlStatisticServiceGetDiskAsyncWithHttpInfo
     *
     * @param  string $service_id (required)
     * @param  string $period (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mysqlStatisticServiceGetDisk'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mysqlStatisticServiceGetDiskAsyncWithHttpInfo($service_id, $period = null, string $contentType = self::contentTypes['mysqlStatisticServiceGetDisk'][0])
    {
        $returnType = '\OpenAPI\Client\Model\MysqlStatisticGetDiskResponse';
        $request = $this->mysqlStatisticServiceGetDiskRequest($service_id, $period, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'mysqlStatisticServiceGetDisk'
     *
     * @param  string $service_id (required)
     * @param  string $period (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mysqlStatisticServiceGetDisk'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function mysqlStatisticServiceGetDiskRequest($service_id, $period = null, string $contentType = self::contentTypes['mysqlStatisticServiceGetDisk'][0])
    {

        // verify the required parameter 'service_id' is set
        if ($service_id === null || (is_array($service_id) && count($service_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $service_id when calling mysqlStatisticServiceGetDisk'
            );
        }



        $resourcePath = '/v1/cloud/mysql/{service_id}/statistic/disk';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $period,
            'period', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($service_id !== null) {
            $resourcePath = str_replace(
                '{' . 'service_id' . '}',
                ObjectSerializer::toPathValue($service_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation mysqlStatisticServiceGetDiskUsage
     *
     * @param  string $service_id service_id (required)
     * @param  string $period period (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mysqlStatisticServiceGetDiskUsage'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\MysqlStatisticGetDiskUsageResponse
     */
    public function mysqlStatisticServiceGetDiskUsage($service_id, $period = null, string $contentType = self::contentTypes['mysqlStatisticServiceGetDiskUsage'][0])
    {
        list($response) = $this->mysqlStatisticServiceGetDiskUsageWithHttpInfo($service_id, $period, $contentType);
        return $response;
    }

    /**
     * Operation mysqlStatisticServiceGetDiskUsageWithHttpInfo
     *
     * @param  string $service_id (required)
     * @param  string $period (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mysqlStatisticServiceGetDiskUsage'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\MysqlStatisticGetDiskUsageResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function mysqlStatisticServiceGetDiskUsageWithHttpInfo($service_id, $period = null, string $contentType = self::contentTypes['mysqlStatisticServiceGetDiskUsage'][0])
    {
        $request = $this->mysqlStatisticServiceGetDiskUsageRequest($service_id, $period, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\MysqlStatisticGetDiskUsageResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\MysqlStatisticGetDiskUsageResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\MysqlStatisticGetDiskUsageResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\MysqlStatisticGetDiskUsageResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\MysqlStatisticGetDiskUsageResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation mysqlStatisticServiceGetDiskUsageAsync
     *
     * @param  string $service_id (required)
     * @param  string $period (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mysqlStatisticServiceGetDiskUsage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mysqlStatisticServiceGetDiskUsageAsync($service_id, $period = null, string $contentType = self::contentTypes['mysqlStatisticServiceGetDiskUsage'][0])
    {
        return $this->mysqlStatisticServiceGetDiskUsageAsyncWithHttpInfo($service_id, $period, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation mysqlStatisticServiceGetDiskUsageAsyncWithHttpInfo
     *
     * @param  string $service_id (required)
     * @param  string $period (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mysqlStatisticServiceGetDiskUsage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mysqlStatisticServiceGetDiskUsageAsyncWithHttpInfo($service_id, $period = null, string $contentType = self::contentTypes['mysqlStatisticServiceGetDiskUsage'][0])
    {
        $returnType = '\OpenAPI\Client\Model\MysqlStatisticGetDiskUsageResponse';
        $request = $this->mysqlStatisticServiceGetDiskUsageRequest($service_id, $period, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'mysqlStatisticServiceGetDiskUsage'
     *
     * @param  string $service_id (required)
     * @param  string $period (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mysqlStatisticServiceGetDiskUsage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function mysqlStatisticServiceGetDiskUsageRequest($service_id, $period = null, string $contentType = self::contentTypes['mysqlStatisticServiceGetDiskUsage'][0])
    {

        // verify the required parameter 'service_id' is set
        if ($service_id === null || (is_array($service_id) && count($service_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $service_id when calling mysqlStatisticServiceGetDiskUsage'
            );
        }



        $resourcePath = '/v1/cloud/mysql/{service_id}/statistic/disk-usage';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $period,
            'period', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($service_id !== null) {
            $resourcePath = str_replace(
                '{' . 'service_id' . '}',
                ObjectSerializer::toPathValue($service_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation mysqlStatisticServiceGetLoadAverage
     *
     * @param  string $service_id service_id (required)
     * @param  string $period period (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mysqlStatisticServiceGetLoadAverage'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\MysqlStatisticGetLoadAverageResponse
     */
    public function mysqlStatisticServiceGetLoadAverage($service_id, $period = null, string $contentType = self::contentTypes['mysqlStatisticServiceGetLoadAverage'][0])
    {
        list($response) = $this->mysqlStatisticServiceGetLoadAverageWithHttpInfo($service_id, $period, $contentType);
        return $response;
    }

    /**
     * Operation mysqlStatisticServiceGetLoadAverageWithHttpInfo
     *
     * @param  string $service_id (required)
     * @param  string $period (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mysqlStatisticServiceGetLoadAverage'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\MysqlStatisticGetLoadAverageResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function mysqlStatisticServiceGetLoadAverageWithHttpInfo($service_id, $period = null, string $contentType = self::contentTypes['mysqlStatisticServiceGetLoadAverage'][0])
    {
        $request = $this->mysqlStatisticServiceGetLoadAverageRequest($service_id, $period, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\MysqlStatisticGetLoadAverageResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\MysqlStatisticGetLoadAverageResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\MysqlStatisticGetLoadAverageResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\MysqlStatisticGetLoadAverageResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\MysqlStatisticGetLoadAverageResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation mysqlStatisticServiceGetLoadAverageAsync
     *
     * @param  string $service_id (required)
     * @param  string $period (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mysqlStatisticServiceGetLoadAverage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mysqlStatisticServiceGetLoadAverageAsync($service_id, $period = null, string $contentType = self::contentTypes['mysqlStatisticServiceGetLoadAverage'][0])
    {
        return $this->mysqlStatisticServiceGetLoadAverageAsyncWithHttpInfo($service_id, $period, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation mysqlStatisticServiceGetLoadAverageAsyncWithHttpInfo
     *
     * @param  string $service_id (required)
     * @param  string $period (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mysqlStatisticServiceGetLoadAverage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mysqlStatisticServiceGetLoadAverageAsyncWithHttpInfo($service_id, $period = null, string $contentType = self::contentTypes['mysqlStatisticServiceGetLoadAverage'][0])
    {
        $returnType = '\OpenAPI\Client\Model\MysqlStatisticGetLoadAverageResponse';
        $request = $this->mysqlStatisticServiceGetLoadAverageRequest($service_id, $period, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'mysqlStatisticServiceGetLoadAverage'
     *
     * @param  string $service_id (required)
     * @param  string $period (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mysqlStatisticServiceGetLoadAverage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function mysqlStatisticServiceGetLoadAverageRequest($service_id, $period = null, string $contentType = self::contentTypes['mysqlStatisticServiceGetLoadAverage'][0])
    {

        // verify the required parameter 'service_id' is set
        if ($service_id === null || (is_array($service_id) && count($service_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $service_id when calling mysqlStatisticServiceGetLoadAverage'
            );
        }



        $resourcePath = '/v1/cloud/mysql/{service_id}/statistic/load-average';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $period,
            'period', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($service_id !== null) {
            $resourcePath = str_replace(
                '{' . 'service_id' . '}',
                ObjectSerializer::toPathValue($service_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation mysqlStatisticServiceGetMemory
     *
     * @param  string $service_id service_id (required)
     * @param  string $period period (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mysqlStatisticServiceGetMemory'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\MysqlStatisticGetMemoryResponse
     */
    public function mysqlStatisticServiceGetMemory($service_id, $period = null, string $contentType = self::contentTypes['mysqlStatisticServiceGetMemory'][0])
    {
        list($response) = $this->mysqlStatisticServiceGetMemoryWithHttpInfo($service_id, $period, $contentType);
        return $response;
    }

    /**
     * Operation mysqlStatisticServiceGetMemoryWithHttpInfo
     *
     * @param  string $service_id (required)
     * @param  string $period (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mysqlStatisticServiceGetMemory'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\MysqlStatisticGetMemoryResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function mysqlStatisticServiceGetMemoryWithHttpInfo($service_id, $period = null, string $contentType = self::contentTypes['mysqlStatisticServiceGetMemory'][0])
    {
        $request = $this->mysqlStatisticServiceGetMemoryRequest($service_id, $period, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\MysqlStatisticGetMemoryResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\MysqlStatisticGetMemoryResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\MysqlStatisticGetMemoryResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\MysqlStatisticGetMemoryResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\MysqlStatisticGetMemoryResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation mysqlStatisticServiceGetMemoryAsync
     *
     * @param  string $service_id (required)
     * @param  string $period (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mysqlStatisticServiceGetMemory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mysqlStatisticServiceGetMemoryAsync($service_id, $period = null, string $contentType = self::contentTypes['mysqlStatisticServiceGetMemory'][0])
    {
        return $this->mysqlStatisticServiceGetMemoryAsyncWithHttpInfo($service_id, $period, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation mysqlStatisticServiceGetMemoryAsyncWithHttpInfo
     *
     * @param  string $service_id (required)
     * @param  string $period (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mysqlStatisticServiceGetMemory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mysqlStatisticServiceGetMemoryAsyncWithHttpInfo($service_id, $period = null, string $contentType = self::contentTypes['mysqlStatisticServiceGetMemory'][0])
    {
        $returnType = '\OpenAPI\Client\Model\MysqlStatisticGetMemoryResponse';
        $request = $this->mysqlStatisticServiceGetMemoryRequest($service_id, $period, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'mysqlStatisticServiceGetMemory'
     *
     * @param  string $service_id (required)
     * @param  string $period (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mysqlStatisticServiceGetMemory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function mysqlStatisticServiceGetMemoryRequest($service_id, $period = null, string $contentType = self::contentTypes['mysqlStatisticServiceGetMemory'][0])
    {

        // verify the required parameter 'service_id' is set
        if ($service_id === null || (is_array($service_id) && count($service_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $service_id when calling mysqlStatisticServiceGetMemory'
            );
        }



        $resourcePath = '/v1/cloud/mysql/{service_id}/statistic/memory';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $period,
            'period', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($service_id !== null) {
            $resourcePath = str_replace(
                '{' . 'service_id' . '}',
                ObjectSerializer::toPathValue($service_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation mysqlStatisticServiceGetNetwork
     *
     * @param  string $service_id service_id (required)
     * @param  string $period period (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mysqlStatisticServiceGetNetwork'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\MysqlStatisticGetNetworkResponse
     */
    public function mysqlStatisticServiceGetNetwork($service_id, $period = null, string $contentType = self::contentTypes['mysqlStatisticServiceGetNetwork'][0])
    {
        list($response) = $this->mysqlStatisticServiceGetNetworkWithHttpInfo($service_id, $period, $contentType);
        return $response;
    }

    /**
     * Operation mysqlStatisticServiceGetNetworkWithHttpInfo
     *
     * @param  string $service_id (required)
     * @param  string $period (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mysqlStatisticServiceGetNetwork'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\MysqlStatisticGetNetworkResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function mysqlStatisticServiceGetNetworkWithHttpInfo($service_id, $period = null, string $contentType = self::contentTypes['mysqlStatisticServiceGetNetwork'][0])
    {
        $request = $this->mysqlStatisticServiceGetNetworkRequest($service_id, $period, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\MysqlStatisticGetNetworkResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\MysqlStatisticGetNetworkResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\MysqlStatisticGetNetworkResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\MysqlStatisticGetNetworkResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\MysqlStatisticGetNetworkResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation mysqlStatisticServiceGetNetworkAsync
     *
     * @param  string $service_id (required)
     * @param  string $period (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mysqlStatisticServiceGetNetwork'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mysqlStatisticServiceGetNetworkAsync($service_id, $period = null, string $contentType = self::contentTypes['mysqlStatisticServiceGetNetwork'][0])
    {
        return $this->mysqlStatisticServiceGetNetworkAsyncWithHttpInfo($service_id, $period, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation mysqlStatisticServiceGetNetworkAsyncWithHttpInfo
     *
     * @param  string $service_id (required)
     * @param  string $period (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mysqlStatisticServiceGetNetwork'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mysqlStatisticServiceGetNetworkAsyncWithHttpInfo($service_id, $period = null, string $contentType = self::contentTypes['mysqlStatisticServiceGetNetwork'][0])
    {
        $returnType = '\OpenAPI\Client\Model\MysqlStatisticGetNetworkResponse';
        $request = $this->mysqlStatisticServiceGetNetworkRequest($service_id, $period, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'mysqlStatisticServiceGetNetwork'
     *
     * @param  string $service_id (required)
     * @param  string $period (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mysqlStatisticServiceGetNetwork'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function mysqlStatisticServiceGetNetworkRequest($service_id, $period = null, string $contentType = self::contentTypes['mysqlStatisticServiceGetNetwork'][0])
    {

        // verify the required parameter 'service_id' is set
        if ($service_id === null || (is_array($service_id) && count($service_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $service_id when calling mysqlStatisticServiceGetNetwork'
            );
        }



        $resourcePath = '/v1/cloud/mysql/{service_id}/statistic/network';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $period,
            'period', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($service_id !== null) {
            $resourcePath = str_replace(
                '{' . 'service_id' . '}',
                ObjectSerializer::toPathValue($service_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
