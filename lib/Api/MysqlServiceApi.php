<?php
/**
 * MysqlServiceApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Управляемых сервисов
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.3.1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * MysqlServiceApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class MysqlServiceApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'mysqlServiceChangeAccessPassword' => [
            'application/json',
        ],
        'mysqlServiceCreateAccess' => [
            'application/json',
        ],
        'mysqlServiceCreateDb' => [
            'application/json',
        ],
        'mysqlServiceGetConfig' => [
            'application/json',
        ],
        'mysqlServiceGetDbList' => [
            'application/json',
        ],
        'mysqlServiceRemoveAccess' => [
            'application/json',
        ],
        'mysqlServiceRemoveDb' => [
            'application/json',
        ],
        'mysqlServiceSetConfig' => [
            'application/json',
        ],
        'mysqlServiceUpdateDb' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation mysqlServiceChangeAccessPassword
     *
     * @param  string $service_id service_id (required)
     * @param  string $db_name db_name (required)
     * @param  string $host host (required)
     * @param  \OpenAPI\Client\Model\MysqlChangeAccessPasswordRequest $mysql_change_access_password_request mysql_change_access_password_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mysqlServiceChangeAccessPassword'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\MysqlChangeAccessPasswordResponse
     */
    public function mysqlServiceChangeAccessPassword($service_id, $db_name, $host, $mysql_change_access_password_request, string $contentType = self::contentTypes['mysqlServiceChangeAccessPassword'][0])
    {
        list($response) = $this->mysqlServiceChangeAccessPasswordWithHttpInfo($service_id, $db_name, $host, $mysql_change_access_password_request, $contentType);
        return $response;
    }

    /**
     * Operation mysqlServiceChangeAccessPasswordWithHttpInfo
     *
     * @param  string $service_id (required)
     * @param  string $db_name (required)
     * @param  string $host (required)
     * @param  \OpenAPI\Client\Model\MysqlChangeAccessPasswordRequest $mysql_change_access_password_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mysqlServiceChangeAccessPassword'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\MysqlChangeAccessPasswordResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function mysqlServiceChangeAccessPasswordWithHttpInfo($service_id, $db_name, $host, $mysql_change_access_password_request, string $contentType = self::contentTypes['mysqlServiceChangeAccessPassword'][0])
    {
        $request = $this->mysqlServiceChangeAccessPasswordRequest($service_id, $db_name, $host, $mysql_change_access_password_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\MysqlChangeAccessPasswordResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\MysqlChangeAccessPasswordResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\MysqlChangeAccessPasswordResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\MysqlChangeAccessPasswordResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\MysqlChangeAccessPasswordResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation mysqlServiceChangeAccessPasswordAsync
     *
     * @param  string $service_id (required)
     * @param  string $db_name (required)
     * @param  string $host (required)
     * @param  \OpenAPI\Client\Model\MysqlChangeAccessPasswordRequest $mysql_change_access_password_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mysqlServiceChangeAccessPassword'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mysqlServiceChangeAccessPasswordAsync($service_id, $db_name, $host, $mysql_change_access_password_request, string $contentType = self::contentTypes['mysqlServiceChangeAccessPassword'][0])
    {
        return $this->mysqlServiceChangeAccessPasswordAsyncWithHttpInfo($service_id, $db_name, $host, $mysql_change_access_password_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation mysqlServiceChangeAccessPasswordAsyncWithHttpInfo
     *
     * @param  string $service_id (required)
     * @param  string $db_name (required)
     * @param  string $host (required)
     * @param  \OpenAPI\Client\Model\MysqlChangeAccessPasswordRequest $mysql_change_access_password_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mysqlServiceChangeAccessPassword'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mysqlServiceChangeAccessPasswordAsyncWithHttpInfo($service_id, $db_name, $host, $mysql_change_access_password_request, string $contentType = self::contentTypes['mysqlServiceChangeAccessPassword'][0])
    {
        $returnType = '\OpenAPI\Client\Model\MysqlChangeAccessPasswordResponse';
        $request = $this->mysqlServiceChangeAccessPasswordRequest($service_id, $db_name, $host, $mysql_change_access_password_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'mysqlServiceChangeAccessPassword'
     *
     * @param  string $service_id (required)
     * @param  string $db_name (required)
     * @param  string $host (required)
     * @param  \OpenAPI\Client\Model\MysqlChangeAccessPasswordRequest $mysql_change_access_password_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mysqlServiceChangeAccessPassword'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function mysqlServiceChangeAccessPasswordRequest($service_id, $db_name, $host, $mysql_change_access_password_request, string $contentType = self::contentTypes['mysqlServiceChangeAccessPassword'][0])
    {

        // verify the required parameter 'service_id' is set
        if ($service_id === null || (is_array($service_id) && count($service_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $service_id when calling mysqlServiceChangeAccessPassword'
            );
        }

        // verify the required parameter 'db_name' is set
        if ($db_name === null || (is_array($db_name) && count($db_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $db_name when calling mysqlServiceChangeAccessPassword'
            );
        }

        // verify the required parameter 'host' is set
        if ($host === null || (is_array($host) && count($host) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $host when calling mysqlServiceChangeAccessPassword'
            );
        }

        // verify the required parameter 'mysql_change_access_password_request' is set
        if ($mysql_change_access_password_request === null || (is_array($mysql_change_access_password_request) && count($mysql_change_access_password_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mysql_change_access_password_request when calling mysqlServiceChangeAccessPassword'
            );
        }


        $resourcePath = '/v1/cloud/mysql/{service_id}/db/{db_name}/access/{host}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($service_id !== null) {
            $resourcePath = str_replace(
                '{' . 'service_id' . '}',
                ObjectSerializer::toPathValue($service_id),
                $resourcePath
            );
        }
        // path params
        if ($db_name !== null) {
            $resourcePath = str_replace(
                '{' . 'db_name' . '}',
                ObjectSerializer::toPathValue($db_name),
                $resourcePath
            );
        }
        // path params
        if ($host !== null) {
            $resourcePath = str_replace(
                '{' . 'host' . '}',
                ObjectSerializer::toPathValue($host),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mysql_change_access_password_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($mysql_change_access_password_request));
            } else {
                $httpBody = $mysql_change_access_password_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation mysqlServiceCreateAccess
     *
     * @param  string $service_id service_id (required)
     * @param  string $db_name db_name (required)
     * @param  \OpenAPI\Client\Model\MysqlCreateAccessRequest $mysql_create_access_request mysql_create_access_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mysqlServiceCreateAccess'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\MysqlCreateAccessResponse
     */
    public function mysqlServiceCreateAccess($service_id, $db_name, $mysql_create_access_request, string $contentType = self::contentTypes['mysqlServiceCreateAccess'][0])
    {
        list($response) = $this->mysqlServiceCreateAccessWithHttpInfo($service_id, $db_name, $mysql_create_access_request, $contentType);
        return $response;
    }

    /**
     * Operation mysqlServiceCreateAccessWithHttpInfo
     *
     * @param  string $service_id (required)
     * @param  string $db_name (required)
     * @param  \OpenAPI\Client\Model\MysqlCreateAccessRequest $mysql_create_access_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mysqlServiceCreateAccess'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\MysqlCreateAccessResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function mysqlServiceCreateAccessWithHttpInfo($service_id, $db_name, $mysql_create_access_request, string $contentType = self::contentTypes['mysqlServiceCreateAccess'][0])
    {
        $request = $this->mysqlServiceCreateAccessRequest($service_id, $db_name, $mysql_create_access_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\MysqlCreateAccessResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\MysqlCreateAccessResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\MysqlCreateAccessResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\MysqlCreateAccessResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\MysqlCreateAccessResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation mysqlServiceCreateAccessAsync
     *
     * @param  string $service_id (required)
     * @param  string $db_name (required)
     * @param  \OpenAPI\Client\Model\MysqlCreateAccessRequest $mysql_create_access_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mysqlServiceCreateAccess'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mysqlServiceCreateAccessAsync($service_id, $db_name, $mysql_create_access_request, string $contentType = self::contentTypes['mysqlServiceCreateAccess'][0])
    {
        return $this->mysqlServiceCreateAccessAsyncWithHttpInfo($service_id, $db_name, $mysql_create_access_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation mysqlServiceCreateAccessAsyncWithHttpInfo
     *
     * @param  string $service_id (required)
     * @param  string $db_name (required)
     * @param  \OpenAPI\Client\Model\MysqlCreateAccessRequest $mysql_create_access_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mysqlServiceCreateAccess'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mysqlServiceCreateAccessAsyncWithHttpInfo($service_id, $db_name, $mysql_create_access_request, string $contentType = self::contentTypes['mysqlServiceCreateAccess'][0])
    {
        $returnType = '\OpenAPI\Client\Model\MysqlCreateAccessResponse';
        $request = $this->mysqlServiceCreateAccessRequest($service_id, $db_name, $mysql_create_access_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'mysqlServiceCreateAccess'
     *
     * @param  string $service_id (required)
     * @param  string $db_name (required)
     * @param  \OpenAPI\Client\Model\MysqlCreateAccessRequest $mysql_create_access_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mysqlServiceCreateAccess'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function mysqlServiceCreateAccessRequest($service_id, $db_name, $mysql_create_access_request, string $contentType = self::contentTypes['mysqlServiceCreateAccess'][0])
    {

        // verify the required parameter 'service_id' is set
        if ($service_id === null || (is_array($service_id) && count($service_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $service_id when calling mysqlServiceCreateAccess'
            );
        }

        // verify the required parameter 'db_name' is set
        if ($db_name === null || (is_array($db_name) && count($db_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $db_name when calling mysqlServiceCreateAccess'
            );
        }

        // verify the required parameter 'mysql_create_access_request' is set
        if ($mysql_create_access_request === null || (is_array($mysql_create_access_request) && count($mysql_create_access_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mysql_create_access_request when calling mysqlServiceCreateAccess'
            );
        }


        $resourcePath = '/v1/cloud/mysql/{service_id}/db/{db_name}/access';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($service_id !== null) {
            $resourcePath = str_replace(
                '{' . 'service_id' . '}',
                ObjectSerializer::toPathValue($service_id),
                $resourcePath
            );
        }
        // path params
        if ($db_name !== null) {
            $resourcePath = str_replace(
                '{' . 'db_name' . '}',
                ObjectSerializer::toPathValue($db_name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mysql_create_access_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($mysql_create_access_request));
            } else {
                $httpBody = $mysql_create_access_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation mysqlServiceCreateDb
     *
     * @param  string $service_id service_id (required)
     * @param  \OpenAPI\Client\Model\MysqlCreateDbRequest $mysql_create_db_request mysql_create_db_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mysqlServiceCreateDb'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\MysqlCreateDbResponse
     */
    public function mysqlServiceCreateDb($service_id, $mysql_create_db_request, string $contentType = self::contentTypes['mysqlServiceCreateDb'][0])
    {
        list($response) = $this->mysqlServiceCreateDbWithHttpInfo($service_id, $mysql_create_db_request, $contentType);
        return $response;
    }

    /**
     * Operation mysqlServiceCreateDbWithHttpInfo
     *
     * @param  string $service_id (required)
     * @param  \OpenAPI\Client\Model\MysqlCreateDbRequest $mysql_create_db_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mysqlServiceCreateDb'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\MysqlCreateDbResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function mysqlServiceCreateDbWithHttpInfo($service_id, $mysql_create_db_request, string $contentType = self::contentTypes['mysqlServiceCreateDb'][0])
    {
        $request = $this->mysqlServiceCreateDbRequest($service_id, $mysql_create_db_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\MysqlCreateDbResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\MysqlCreateDbResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\MysqlCreateDbResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\MysqlCreateDbResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\MysqlCreateDbResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation mysqlServiceCreateDbAsync
     *
     * @param  string $service_id (required)
     * @param  \OpenAPI\Client\Model\MysqlCreateDbRequest $mysql_create_db_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mysqlServiceCreateDb'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mysqlServiceCreateDbAsync($service_id, $mysql_create_db_request, string $contentType = self::contentTypes['mysqlServiceCreateDb'][0])
    {
        return $this->mysqlServiceCreateDbAsyncWithHttpInfo($service_id, $mysql_create_db_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation mysqlServiceCreateDbAsyncWithHttpInfo
     *
     * @param  string $service_id (required)
     * @param  \OpenAPI\Client\Model\MysqlCreateDbRequest $mysql_create_db_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mysqlServiceCreateDb'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mysqlServiceCreateDbAsyncWithHttpInfo($service_id, $mysql_create_db_request, string $contentType = self::contentTypes['mysqlServiceCreateDb'][0])
    {
        $returnType = '\OpenAPI\Client\Model\MysqlCreateDbResponse';
        $request = $this->mysqlServiceCreateDbRequest($service_id, $mysql_create_db_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'mysqlServiceCreateDb'
     *
     * @param  string $service_id (required)
     * @param  \OpenAPI\Client\Model\MysqlCreateDbRequest $mysql_create_db_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mysqlServiceCreateDb'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function mysqlServiceCreateDbRequest($service_id, $mysql_create_db_request, string $contentType = self::contentTypes['mysqlServiceCreateDb'][0])
    {

        // verify the required parameter 'service_id' is set
        if ($service_id === null || (is_array($service_id) && count($service_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $service_id when calling mysqlServiceCreateDb'
            );
        }

        // verify the required parameter 'mysql_create_db_request' is set
        if ($mysql_create_db_request === null || (is_array($mysql_create_db_request) && count($mysql_create_db_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mysql_create_db_request when calling mysqlServiceCreateDb'
            );
        }


        $resourcePath = '/v1/cloud/mysql/{service_id}/db';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($service_id !== null) {
            $resourcePath = str_replace(
                '{' . 'service_id' . '}',
                ObjectSerializer::toPathValue($service_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mysql_create_db_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($mysql_create_db_request));
            } else {
                $httpBody = $mysql_create_db_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation mysqlServiceGetConfig
     *
     * @param  string $service_id service_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mysqlServiceGetConfig'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\MysqlGetConfigResponse
     */
    public function mysqlServiceGetConfig($service_id, string $contentType = self::contentTypes['mysqlServiceGetConfig'][0])
    {
        list($response) = $this->mysqlServiceGetConfigWithHttpInfo($service_id, $contentType);
        return $response;
    }

    /**
     * Operation mysqlServiceGetConfigWithHttpInfo
     *
     * @param  string $service_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mysqlServiceGetConfig'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\MysqlGetConfigResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function mysqlServiceGetConfigWithHttpInfo($service_id, string $contentType = self::contentTypes['mysqlServiceGetConfig'][0])
    {
        $request = $this->mysqlServiceGetConfigRequest($service_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\MysqlGetConfigResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\MysqlGetConfigResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\MysqlGetConfigResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\MysqlGetConfigResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\MysqlGetConfigResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation mysqlServiceGetConfigAsync
     *
     * @param  string $service_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mysqlServiceGetConfig'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mysqlServiceGetConfigAsync($service_id, string $contentType = self::contentTypes['mysqlServiceGetConfig'][0])
    {
        return $this->mysqlServiceGetConfigAsyncWithHttpInfo($service_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation mysqlServiceGetConfigAsyncWithHttpInfo
     *
     * @param  string $service_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mysqlServiceGetConfig'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mysqlServiceGetConfigAsyncWithHttpInfo($service_id, string $contentType = self::contentTypes['mysqlServiceGetConfig'][0])
    {
        $returnType = '\OpenAPI\Client\Model\MysqlGetConfigResponse';
        $request = $this->mysqlServiceGetConfigRequest($service_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'mysqlServiceGetConfig'
     *
     * @param  string $service_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mysqlServiceGetConfig'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function mysqlServiceGetConfigRequest($service_id, string $contentType = self::contentTypes['mysqlServiceGetConfig'][0])
    {

        // verify the required parameter 'service_id' is set
        if ($service_id === null || (is_array($service_id) && count($service_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $service_id when calling mysqlServiceGetConfig'
            );
        }


        $resourcePath = '/v1/cloud/mysql/{service_id}/config';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($service_id !== null) {
            $resourcePath = str_replace(
                '{' . 'service_id' . '}',
                ObjectSerializer::toPathValue($service_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation mysqlServiceGetDbList
     *
     * @param  string $service_id service_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mysqlServiceGetDbList'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\MysqlGetDbListResponse
     */
    public function mysqlServiceGetDbList($service_id, string $contentType = self::contentTypes['mysqlServiceGetDbList'][0])
    {
        list($response) = $this->mysqlServiceGetDbListWithHttpInfo($service_id, $contentType);
        return $response;
    }

    /**
     * Operation mysqlServiceGetDbListWithHttpInfo
     *
     * @param  string $service_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mysqlServiceGetDbList'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\MysqlGetDbListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function mysqlServiceGetDbListWithHttpInfo($service_id, string $contentType = self::contentTypes['mysqlServiceGetDbList'][0])
    {
        $request = $this->mysqlServiceGetDbListRequest($service_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\MysqlGetDbListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\MysqlGetDbListResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\MysqlGetDbListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\MysqlGetDbListResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\MysqlGetDbListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation mysqlServiceGetDbListAsync
     *
     * @param  string $service_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mysqlServiceGetDbList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mysqlServiceGetDbListAsync($service_id, string $contentType = self::contentTypes['mysqlServiceGetDbList'][0])
    {
        return $this->mysqlServiceGetDbListAsyncWithHttpInfo($service_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation mysqlServiceGetDbListAsyncWithHttpInfo
     *
     * @param  string $service_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mysqlServiceGetDbList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mysqlServiceGetDbListAsyncWithHttpInfo($service_id, string $contentType = self::contentTypes['mysqlServiceGetDbList'][0])
    {
        $returnType = '\OpenAPI\Client\Model\MysqlGetDbListResponse';
        $request = $this->mysqlServiceGetDbListRequest($service_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'mysqlServiceGetDbList'
     *
     * @param  string $service_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mysqlServiceGetDbList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function mysqlServiceGetDbListRequest($service_id, string $contentType = self::contentTypes['mysqlServiceGetDbList'][0])
    {

        // verify the required parameter 'service_id' is set
        if ($service_id === null || (is_array($service_id) && count($service_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $service_id when calling mysqlServiceGetDbList'
            );
        }


        $resourcePath = '/v1/cloud/mysql/{service_id}/db';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($service_id !== null) {
            $resourcePath = str_replace(
                '{' . 'service_id' . '}',
                ObjectSerializer::toPathValue($service_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation mysqlServiceRemoveAccess
     *
     * @param  string $service_id service_id (required)
     * @param  string $db_name db_name (required)
     * @param  string $host host (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mysqlServiceRemoveAccess'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\MysqlRemoveAccessResponse
     */
    public function mysqlServiceRemoveAccess($service_id, $db_name, $host, string $contentType = self::contentTypes['mysqlServiceRemoveAccess'][0])
    {
        list($response) = $this->mysqlServiceRemoveAccessWithHttpInfo($service_id, $db_name, $host, $contentType);
        return $response;
    }

    /**
     * Operation mysqlServiceRemoveAccessWithHttpInfo
     *
     * @param  string $service_id (required)
     * @param  string $db_name (required)
     * @param  string $host (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mysqlServiceRemoveAccess'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\MysqlRemoveAccessResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function mysqlServiceRemoveAccessWithHttpInfo($service_id, $db_name, $host, string $contentType = self::contentTypes['mysqlServiceRemoveAccess'][0])
    {
        $request = $this->mysqlServiceRemoveAccessRequest($service_id, $db_name, $host, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\MysqlRemoveAccessResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\MysqlRemoveAccessResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\MysqlRemoveAccessResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\MysqlRemoveAccessResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\MysqlRemoveAccessResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation mysqlServiceRemoveAccessAsync
     *
     * @param  string $service_id (required)
     * @param  string $db_name (required)
     * @param  string $host (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mysqlServiceRemoveAccess'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mysqlServiceRemoveAccessAsync($service_id, $db_name, $host, string $contentType = self::contentTypes['mysqlServiceRemoveAccess'][0])
    {
        return $this->mysqlServiceRemoveAccessAsyncWithHttpInfo($service_id, $db_name, $host, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation mysqlServiceRemoveAccessAsyncWithHttpInfo
     *
     * @param  string $service_id (required)
     * @param  string $db_name (required)
     * @param  string $host (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mysqlServiceRemoveAccess'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mysqlServiceRemoveAccessAsyncWithHttpInfo($service_id, $db_name, $host, string $contentType = self::contentTypes['mysqlServiceRemoveAccess'][0])
    {
        $returnType = '\OpenAPI\Client\Model\MysqlRemoveAccessResponse';
        $request = $this->mysqlServiceRemoveAccessRequest($service_id, $db_name, $host, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'mysqlServiceRemoveAccess'
     *
     * @param  string $service_id (required)
     * @param  string $db_name (required)
     * @param  string $host (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mysqlServiceRemoveAccess'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function mysqlServiceRemoveAccessRequest($service_id, $db_name, $host, string $contentType = self::contentTypes['mysqlServiceRemoveAccess'][0])
    {

        // verify the required parameter 'service_id' is set
        if ($service_id === null || (is_array($service_id) && count($service_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $service_id when calling mysqlServiceRemoveAccess'
            );
        }

        // verify the required parameter 'db_name' is set
        if ($db_name === null || (is_array($db_name) && count($db_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $db_name when calling mysqlServiceRemoveAccess'
            );
        }

        // verify the required parameter 'host' is set
        if ($host === null || (is_array($host) && count($host) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $host when calling mysqlServiceRemoveAccess'
            );
        }


        $resourcePath = '/v1/cloud/mysql/{service_id}/db/{db_name}/access/{host}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($service_id !== null) {
            $resourcePath = str_replace(
                '{' . 'service_id' . '}',
                ObjectSerializer::toPathValue($service_id),
                $resourcePath
            );
        }
        // path params
        if ($db_name !== null) {
            $resourcePath = str_replace(
                '{' . 'db_name' . '}',
                ObjectSerializer::toPathValue($db_name),
                $resourcePath
            );
        }
        // path params
        if ($host !== null) {
            $resourcePath = str_replace(
                '{' . 'host' . '}',
                ObjectSerializer::toPathValue($host),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation mysqlServiceRemoveDb
     *
     * @param  string $service_id service_id (required)
     * @param  string $db_name db_name (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mysqlServiceRemoveDb'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\MysqlRemoveDbResponse
     */
    public function mysqlServiceRemoveDb($service_id, $db_name, string $contentType = self::contentTypes['mysqlServiceRemoveDb'][0])
    {
        list($response) = $this->mysqlServiceRemoveDbWithHttpInfo($service_id, $db_name, $contentType);
        return $response;
    }

    /**
     * Operation mysqlServiceRemoveDbWithHttpInfo
     *
     * @param  string $service_id (required)
     * @param  string $db_name (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mysqlServiceRemoveDb'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\MysqlRemoveDbResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function mysqlServiceRemoveDbWithHttpInfo($service_id, $db_name, string $contentType = self::contentTypes['mysqlServiceRemoveDb'][0])
    {
        $request = $this->mysqlServiceRemoveDbRequest($service_id, $db_name, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\MysqlRemoveDbResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\MysqlRemoveDbResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\MysqlRemoveDbResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\MysqlRemoveDbResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\MysqlRemoveDbResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation mysqlServiceRemoveDbAsync
     *
     * @param  string $service_id (required)
     * @param  string $db_name (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mysqlServiceRemoveDb'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mysqlServiceRemoveDbAsync($service_id, $db_name, string $contentType = self::contentTypes['mysqlServiceRemoveDb'][0])
    {
        return $this->mysqlServiceRemoveDbAsyncWithHttpInfo($service_id, $db_name, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation mysqlServiceRemoveDbAsyncWithHttpInfo
     *
     * @param  string $service_id (required)
     * @param  string $db_name (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mysqlServiceRemoveDb'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mysqlServiceRemoveDbAsyncWithHttpInfo($service_id, $db_name, string $contentType = self::contentTypes['mysqlServiceRemoveDb'][0])
    {
        $returnType = '\OpenAPI\Client\Model\MysqlRemoveDbResponse';
        $request = $this->mysqlServiceRemoveDbRequest($service_id, $db_name, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'mysqlServiceRemoveDb'
     *
     * @param  string $service_id (required)
     * @param  string $db_name (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mysqlServiceRemoveDb'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function mysqlServiceRemoveDbRequest($service_id, $db_name, string $contentType = self::contentTypes['mysqlServiceRemoveDb'][0])
    {

        // verify the required parameter 'service_id' is set
        if ($service_id === null || (is_array($service_id) && count($service_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $service_id when calling mysqlServiceRemoveDb'
            );
        }

        // verify the required parameter 'db_name' is set
        if ($db_name === null || (is_array($db_name) && count($db_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $db_name when calling mysqlServiceRemoveDb'
            );
        }


        $resourcePath = '/v1/cloud/mysql/{service_id}/db/{db_name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($service_id !== null) {
            $resourcePath = str_replace(
                '{' . 'service_id' . '}',
                ObjectSerializer::toPathValue($service_id),
                $resourcePath
            );
        }
        // path params
        if ($db_name !== null) {
            $resourcePath = str_replace(
                '{' . 'db_name' . '}',
                ObjectSerializer::toPathValue($db_name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation mysqlServiceSetConfig
     *
     * @param  string $service_id service_id (required)
     * @param  \OpenAPI\Client\Model\MysqlSetConfigRequest $mysql_set_config_request mysql_set_config_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mysqlServiceSetConfig'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\MysqlSetConfigResponse
     */
    public function mysqlServiceSetConfig($service_id, $mysql_set_config_request, string $contentType = self::contentTypes['mysqlServiceSetConfig'][0])
    {
        list($response) = $this->mysqlServiceSetConfigWithHttpInfo($service_id, $mysql_set_config_request, $contentType);
        return $response;
    }

    /**
     * Operation mysqlServiceSetConfigWithHttpInfo
     *
     * @param  string $service_id (required)
     * @param  \OpenAPI\Client\Model\MysqlSetConfigRequest $mysql_set_config_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mysqlServiceSetConfig'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\MysqlSetConfigResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function mysqlServiceSetConfigWithHttpInfo($service_id, $mysql_set_config_request, string $contentType = self::contentTypes['mysqlServiceSetConfig'][0])
    {
        $request = $this->mysqlServiceSetConfigRequest($service_id, $mysql_set_config_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\MysqlSetConfigResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\MysqlSetConfigResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\MysqlSetConfigResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\MysqlSetConfigResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\MysqlSetConfigResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation mysqlServiceSetConfigAsync
     *
     * @param  string $service_id (required)
     * @param  \OpenAPI\Client\Model\MysqlSetConfigRequest $mysql_set_config_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mysqlServiceSetConfig'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mysqlServiceSetConfigAsync($service_id, $mysql_set_config_request, string $contentType = self::contentTypes['mysqlServiceSetConfig'][0])
    {
        return $this->mysqlServiceSetConfigAsyncWithHttpInfo($service_id, $mysql_set_config_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation mysqlServiceSetConfigAsyncWithHttpInfo
     *
     * @param  string $service_id (required)
     * @param  \OpenAPI\Client\Model\MysqlSetConfigRequest $mysql_set_config_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mysqlServiceSetConfig'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mysqlServiceSetConfigAsyncWithHttpInfo($service_id, $mysql_set_config_request, string $contentType = self::contentTypes['mysqlServiceSetConfig'][0])
    {
        $returnType = '\OpenAPI\Client\Model\MysqlSetConfigResponse';
        $request = $this->mysqlServiceSetConfigRequest($service_id, $mysql_set_config_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'mysqlServiceSetConfig'
     *
     * @param  string $service_id (required)
     * @param  \OpenAPI\Client\Model\MysqlSetConfigRequest $mysql_set_config_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mysqlServiceSetConfig'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function mysqlServiceSetConfigRequest($service_id, $mysql_set_config_request, string $contentType = self::contentTypes['mysqlServiceSetConfig'][0])
    {

        // verify the required parameter 'service_id' is set
        if ($service_id === null || (is_array($service_id) && count($service_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $service_id when calling mysqlServiceSetConfig'
            );
        }

        // verify the required parameter 'mysql_set_config_request' is set
        if ($mysql_set_config_request === null || (is_array($mysql_set_config_request) && count($mysql_set_config_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mysql_set_config_request when calling mysqlServiceSetConfig'
            );
        }


        $resourcePath = '/v1/cloud/mysql/{service_id}/config';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($service_id !== null) {
            $resourcePath = str_replace(
                '{' . 'service_id' . '}',
                ObjectSerializer::toPathValue($service_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mysql_set_config_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($mysql_set_config_request));
            } else {
                $httpBody = $mysql_set_config_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation mysqlServiceUpdateDb
     *
     * @param  string $service_id service_id (required)
     * @param  string $db_name db_name (required)
     * @param  \OpenAPI\Client\Model\MysqlUpdateDbRequest $mysql_update_db_request mysql_update_db_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mysqlServiceUpdateDb'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\MysqlUpdateDbResponse
     */
    public function mysqlServiceUpdateDb($service_id, $db_name, $mysql_update_db_request, string $contentType = self::contentTypes['mysqlServiceUpdateDb'][0])
    {
        list($response) = $this->mysqlServiceUpdateDbWithHttpInfo($service_id, $db_name, $mysql_update_db_request, $contentType);
        return $response;
    }

    /**
     * Operation mysqlServiceUpdateDbWithHttpInfo
     *
     * @param  string $service_id (required)
     * @param  string $db_name (required)
     * @param  \OpenAPI\Client\Model\MysqlUpdateDbRequest $mysql_update_db_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mysqlServiceUpdateDb'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\MysqlUpdateDbResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function mysqlServiceUpdateDbWithHttpInfo($service_id, $db_name, $mysql_update_db_request, string $contentType = self::contentTypes['mysqlServiceUpdateDb'][0])
    {
        $request = $this->mysqlServiceUpdateDbRequest($service_id, $db_name, $mysql_update_db_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\MysqlUpdateDbResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\MysqlUpdateDbResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\MysqlUpdateDbResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\MysqlUpdateDbResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\MysqlUpdateDbResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation mysqlServiceUpdateDbAsync
     *
     * @param  string $service_id (required)
     * @param  string $db_name (required)
     * @param  \OpenAPI\Client\Model\MysqlUpdateDbRequest $mysql_update_db_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mysqlServiceUpdateDb'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mysqlServiceUpdateDbAsync($service_id, $db_name, $mysql_update_db_request, string $contentType = self::contentTypes['mysqlServiceUpdateDb'][0])
    {
        return $this->mysqlServiceUpdateDbAsyncWithHttpInfo($service_id, $db_name, $mysql_update_db_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation mysqlServiceUpdateDbAsyncWithHttpInfo
     *
     * @param  string $service_id (required)
     * @param  string $db_name (required)
     * @param  \OpenAPI\Client\Model\MysqlUpdateDbRequest $mysql_update_db_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mysqlServiceUpdateDb'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mysqlServiceUpdateDbAsyncWithHttpInfo($service_id, $db_name, $mysql_update_db_request, string $contentType = self::contentTypes['mysqlServiceUpdateDb'][0])
    {
        $returnType = '\OpenAPI\Client\Model\MysqlUpdateDbResponse';
        $request = $this->mysqlServiceUpdateDbRequest($service_id, $db_name, $mysql_update_db_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'mysqlServiceUpdateDb'
     *
     * @param  string $service_id (required)
     * @param  string $db_name (required)
     * @param  \OpenAPI\Client\Model\MysqlUpdateDbRequest $mysql_update_db_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mysqlServiceUpdateDb'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function mysqlServiceUpdateDbRequest($service_id, $db_name, $mysql_update_db_request, string $contentType = self::contentTypes['mysqlServiceUpdateDb'][0])
    {

        // verify the required parameter 'service_id' is set
        if ($service_id === null || (is_array($service_id) && count($service_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $service_id when calling mysqlServiceUpdateDb'
            );
        }

        // verify the required parameter 'db_name' is set
        if ($db_name === null || (is_array($db_name) && count($db_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $db_name when calling mysqlServiceUpdateDb'
            );
        }

        // verify the required parameter 'mysql_update_db_request' is set
        if ($mysql_update_db_request === null || (is_array($mysql_update_db_request) && count($mysql_update_db_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mysql_update_db_request when calling mysqlServiceUpdateDb'
            );
        }


        $resourcePath = '/v1/cloud/mysql/{service_id}/db/{db_name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($service_id !== null) {
            $resourcePath = str_replace(
                '{' . 'service_id' . '}',
                ObjectSerializer::toPathValue($service_id),
                $resourcePath
            );
        }
        // path params
        if ($db_name !== null) {
            $resourcePath = str_replace(
                '{' . 'db_name' . '}',
                ObjectSerializer::toPathValue($db_name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mysql_update_db_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($mysql_update_db_request));
            } else {
                $httpBody = $mysql_update_db_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
